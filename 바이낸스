from binance.client import Client
import pandas as pd
from datetime import datetime, timedelta
from pytz import timezone
import pandas_ta as ta
import threading
import time

# Binance API 키
api_key = '1'
api_secret = '1'
client = Client(api_key, api_secret)

# 설정
symbol = "BTCUSDT"
interval = Client.KLINE_INTERVAL_15MINUTE

# 현재 시간 기준 4시간 전 타임스탬프 계산
tz = timezone('Asia/Seoul')  # 원하는 시간대
start_time = datetime.now(tz) - timedelta(hours=2)
start_time = int(start_time.timestamp() * 1000)

import time

# Binance 서버 시간 가져오기
server_time = client.get_server_time()
print(server_time)
server_timestamp = server_time['serverTime']

# 현재 로컬 시스템 시간 (밀리초 단위)
current_time = int(time.time() * 1000)

# 타임스탬프를 사람이 읽을 수 있는 형식으로 변환
server_time_formatted = datetime.fromtimestamp(server_timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')
current_time_formatted = datetime.fromtimestamp(current_time / 1000).strftime('%Y-%m-%d %H:%M:%S')

print(f"Server time (formatted): {server_time_formatted}")
print(f"Current time (formatted): {current_time_formatted}")

# USDT 잔고 및 가용 잔고 계산
account_info = client.futures_account()

total_usdt_balance = None
available_usdt_balance = None

for asset in account_info['assets']:
    if asset['asset'] == 'USDT':
        total_usdt_balance = asset['walletBalance']  # 전체 잔고
        available_usdt_balance = asset['availableBalance']  # 사용 가능한 잔고
        break

# 결과 출력
print(f"Total USDT balance: {total_usdt_balance}")
print(f"Available USDT balance: {available_usdt_balance}")

# 실시간 시세 WebSocket
import json
from websocket import WebSocketApp

SOCKET = "wss://fstream.binance.com/ws/btcusdt@kline_15m/xrpusdt@kline_15m/dogeusdt@kline_15m"

data_frames = {
    "BTCUSDT": pd.DataFrame(columns=["timestamp", "close"]),
    "XRPUSDT": pd.DataFrame(columns=["timestamp", "close"]),
    "DOGEUSDT": pd.DataFrame(columns=["timestamp", "close"]),
}

def fetch_recent_data(symbol, limit=9):
    try:
        klines = client.futures_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_15MINUTE, limit=limit)
        data = pd.DataFrame(klines, columns=[
            "timestamp", "open", "high", "low", "close", "volume",
            "close_time", "quote_asset_volume", "number_of_trades",
            "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"
        ])
        data["close"] = data["close"].astype(float)
        print(data[["timestamp", "close"]])  # 추가: API 데이터 확인
        return data
    except Exception as e:
        print(f"Error fetching recent data for {symbol}: {e}")
        return pd.DataFrame()

def calculate_rsi_welles_wilder(prices, period):
    # 상승과 하락 계산
    deltas = prices.diff()
    gains = deltas.where(deltas > 0, 0)  # 상승폭
    losses = -deltas.where(deltas < 0, 0)  # 하락폭

    # 초기 평균 상승/하락 설정 (SMA 사용)
    initial_avg_gain = gains[:period].mean()
    initial_avg_loss = losses[:period].mean()

    # 초기 Welles Wilder MA 값 설정
    avg_gain = [initial_avg_gain]
    avg_loss = [initial_avg_loss]

    # Welles Wilder MA 계산
    k = 1 / period
    for i in range(period, len(prices)):
        avg_gain.append(gains.iloc[i] * k + avg_gain[-1] * (1 - k))
        avg_loss.append(losses.iloc[i] * k + avg_loss[-1] * (1 - k))

    # RS 및 RSI 계산
    avg_gain = pd.Series(avg_gain, index=prices.index[period-1:])
    avg_loss = pd.Series(avg_loss, index=prices.index[period-1:])
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    # RSI 결과 반환
    return rsi

def on_message(ws, message):
    json_message = json.loads(message)
    symbol = json_message['s']
    is_candle_closed = json_message['k']['x']

    if is_candle_closed:
        recent_data = fetch_recent_data(symbol, limit=9)
        websocket_close_price = float(json_message['k']['c'])  # WebSocket close price
        print(f"WebSocket close price: {websocket_close_price}")
        if not recent_data.empty and len(recent_data) == 9:
            try:
                close_prices = recent_data["close"]
                rsi_9 = calculate_rsi_welles_wilder(close_prices, period=9).iloc[-1]
                last_close = close_prices.iloc[-1]
                print(f"API close price: {last_close}")
                print(f"Difference: {abs(last_close - websocket_close_price)}")
                print(f"RSI(9) for {symbol}: {rsi_9}, Close Prices: {close_prices.tolist()}")
            except Exception as e:
                print(f"Error calculating RSI(9) for {symbol}: {e}")
        else:
            print(f"Insufficient data for RSI(9) calculation for {symbol}. Expected 9 rows, got {len(recent_data)}.")

def periodic_rsi_calculation(symbols, interval=10):
    while True:
        print(f"Fetching RSI for symbols: {symbols}")
        print(f"Available USDT balance: {available_usdt_balance}")
        for symbol in symbols:
            recent_data = fetch_recent_data(symbol, limit=9)
            if not recent_data.empty and len(recent_data) == 9:
                try:
                    close_prices = recent_data["close"]
                    rsi_9 = calculate_rsi_welles_wilder(close_prices, period=9).iloc[-1]
                    print(f"RSI(9) for {symbol}: {rsi_9}, Close Prices: {close_prices.tolist()}")
                except Exception as e:
                    print(f"Error calculating RSI(9) for {symbol}: {e}")
            else:
                print(f"Insufficient data for RSI(9) calculation for {symbol}. Expected 9 rows, got {len(recent_data)}.")
        time.sleep(interval)

for symbol in data_frames.keys():
    data_frames[symbol] = fetch_recent_data(symbol)

symbols = list(data_frames.keys())
threading.Thread(target=periodic_rsi_calculation, args=(symbols, 10), daemon=True).start()

def on_open(ws):
    print("Opened connection to Binance Futures WebSocket")

def on_close(ws):
    print("Closed connection to Binance Futures WebSocket")

ws = WebSocketApp(SOCKET, on_open=on_open, on_close=on_close, on_message=on_message)
ws.run_forever(ping_interval=60)
